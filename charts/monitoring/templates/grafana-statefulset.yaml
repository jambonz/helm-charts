apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: grafana
{{ include "common.labels" . | indent 4 }}
  name: grafana
  namespace: {{ dig "global" "monitoring" "namespace" .Release.Namespace (.Values | merge (dict)) | quote }}
spec:
  serviceName: grafana
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
      annotations:
        {{- if .Values.global.podAnnotations }}
        {{ toYaml .Values.global.podAnnotations | default "" | nindent 8 }}
        {{- end }}
        {{- if .Values.grafana.podAnnotations }}
        {{ toYaml .Values.grafana.podAnnotations | default "" | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity:
        {{ toYaml .Values.affinity | default "" | nindent 8 }}
      {{- end }}
      securityContext:
          runAsUser: 472
          fsGroup: 472
      containers:
        - image: {{ .Values.grafana.image }}
          name: grafana
          ports:
            - containerPort: 3000
          {{- if .Values.global.kong.enabled }}
          env:          
          {{- if .Values.global.kong.useHostnames }}
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "false"
          {{else}}
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
            - name: GF_SERVER_ROOT_URL
              value: "/grafana"
            {{- end}}
          {{- end}}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              {{- if .Values.global.kong.enabled }}
              {{- if .Values.global.kong.useHostnames }}
              path: /login
              {{else}}
              path: /grafana/login
              {{- end}}
              {{- end}}
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-claim
            - mountPath: /etc/grafana/provisioning/datasources/datasource.yaml
              name: grafana-provisioning
              subPath: datasource.yaml
            - mountPath: /etc/grafana/provisioning/dashboards/default.yaml
              name: grafana-provisioning
              subPath: default-dashboard.yaml
            - mountPath: /var/lib/grafana/dashboards/jambonz-dashboard.json
              name: grafana-provisioning
              subPath: jambonz-dashboard.json
            - mountPath: /var/lib/grafana/dashboards/jambonz-heplify.json
              name: grafana-provisioning
              subPath: jambonz-heplify.json
      restartPolicy: Always
      volumes:
      - name: grafana-provisioning
        configMap:
          name: grafana-provisioning
          items:
          - key: datasource.yaml
            path: datasource.yaml
          - key: default-dashboard.yaml
            path: default-dashboard.yaml
          - key: jambonz-dashboard.json
            path: jambonz-dashboard.json
          - key: jambonz-heplify.json
            path: jambonz-heplify.json
  volumeClaimTemplates:
  - metadata:
      name: grafana-claim
    spec:
      accessModes: ["ReadWriteOnce"]
      {{- if .Values.storageClassName }}
      storageClassName: {{ .Values.storageClassName }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.grafana.storage }}
