apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgres
{{ include "common.labels" . | indent 4 }}
  name: postgres
  namespace: {{ dig "global" "monitoring" "namespace" .Release.Namespace (.Values | merge (dict)) | quote }}
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      name: postgres
      labels:
        app: postgres
      annotations:
        {{- if .Values.global.podAnnotations }}
        {{ toYaml .Values.global.podAnnotations | default "" | nindent 8 }}
        {{- end }}
        {{- if .Values.postgres.podAnnotations }}
        {{ toYaml .Values.postgres.podAnnotations | default "" | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity:
        {{ toYaml .Values.affinity | default "" | nindent 8 }}
      {{- end }}
      containers:
        - image: {{ .Values.postgres.image }}
          name: postgres
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              value: {{ .Values.postgres.user | b64dec | quote }}
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: postgres-claim
      restartPolicy: Always
  volumeClaimTemplates:
  - metadata:
      name: postgres-claim
    spec:
      accessModes: ["ReadWriteOnce"]
      {{- if .Values.storageClassName }}
      storageClassName: {{ .Values.storageClassName }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.postgres.storage }}
