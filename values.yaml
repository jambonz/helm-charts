global:
  # if defined, create and/or reference db and monitoring services in the specified namespace;
  # otherwise they create and/or referenced them in whatever the .Release namespace is
  db:
    namespace: 
  monitoring:
    namespace:
  kong:
    enabled: false
    useHostnames: true
    tls:
      enabled: false
      clusterIssuer: 
  recordings:
    enabled: false
  track:
    serviceProviderCalls: "0"
    accountCalls: "0"
    appCalls: "0"
  affinity:
    
db: 
  # if true, create the db subchart
  enabled: true
  mysql: 
    secret: amFtYm9uZXM=
monitoring: 
  # if true, create the monitoring subchart
  enabled: true 

# (required) name of cloud provider: azure, aws, digitalocean, gcp, or none 
cloud:

# set this to "1" if you are deploying on AWS and you are using IMDSv2
awsUseIMDSv2:

jwt:
  secret: Rz11JS05NyNUZmZZZg==

# basic information that applies to all jambonz Node.js app
jambonz: 
  # a short identifier for the cluster, needed if multiple jambonz clusters will share the same redis
  clusterId: 

# these values direct which nodepool the SBC sip and rtp pods will be placed in.
# these pods have to be in special nodepools that use host network binding due to the nature
# of sip signaling and the current lack of support for sip in ingress controllers.
#
#   Note: if you want to put sip and rtp into a single nodepool (e.g. to save cost on a smaller deployment)
#   then set both labels below to the same value and both tolerations below to the same value  
#   and use those values when creating your single edge-facing nodepool when you spin up the cluster.
#   (But, for production deployments, separate nodepools are recommended for sip and rtp, and this is the default setup below).
sbc: 
  sip: 
    nodeSelector: 
      label: voip-environment 
      value: sip
    toleration: sip
    ssl:
      enabled: false
  rtp: 
    nodeSelector: 
      label: voip-environment 
      value: rtp
    toleration: rtp
    storageClassName:
    # list of extra initContainers
    extraInitContainers:
    # list of extra containers/sidecars
    extraContainers:
    # list of extra volumes
    extraVolumes:
    statefulset:
      # enable it only if the recordings are also enabled
      enabled: false
      # match this value with the number of jambonz-rtp nodes
      replicas: 1

# information used by the Node.js apps to write statsd to a telegraf listening instance
stats: 
  enabled: "1"
  host: telegraf
  port: "8125"
  protocol: tcp 
  telegraf: "1"
  sampleRate: "1"

# configuration information for rtpengine
rtpengine: 
  image: jambonz/rtpengine:0.1.5
  imagePullPolicy: IfNotPresent
  sidecarImage: jambonz/rtpengine-sidecar:0.8.0-rc17
  sidecarImagePullPolicy: IfNotPresent
  dtmfLogPort:  "22223"
  loglevel: "5"
  homerId: "11"
  # used when global.recordings.enabled is true
  recordings:
    pvc: recordings-shared-volume
    dir: /recordings
    method: pcap
    storage: 10Gi

# used by sidecar apps in sbc-sip and feature-server to connect locally to drachtio server
drachtio: 
  image: drachtio/drachtio-server:0.8.21-rc4
  imagePullPolicy: IfNotPresent
  host: "127.0.0.1"
  port: "9022"
  homerId: "10"
  secret: Y3ltcnU=

# freeswitch configuration
freeswitch: 
  image: drachtio/drachtio-freeswitch-mrf:0.4.22
  imagePullPolicy: IfNotPresent
  args:
    - freeswitch
    - --codec-answer-generous

# mysql configuration used by Node.js app that need to connect
mysql: 
  image: mysql:5.7
  host: mysql 
  database: jambones
  user: jambones 
  # used when the rtp is in StatefulSet mode (sbc.rtp.statefulset.enabled is true)
  storage: 10Gi

# redis configuration used by Node.js app that need to connect
redis: 
  image: redis:alpine
  host: redis 
  port: "6379"

# configuration for jambonz-api-server
api: 
  image: jambonz/api-server:0.8.0-rc17
  imagePullPolicy: Always
  httpPort: "3000"
  replicas: 1
  # (required) hostname for the jambonz port ingress
  hostname:
  # defaults to http, if you have tls enabled change to https 
  # otherwise web to api connection will fail
  protocol:

# jambonz-webapp configuration
webapp: 
  image: jambonz/webapp:0.8.0-rc5
  imagePullPolicy: IfNotPresent
  replicas: 1
  
  # (required) hostname for the jambonz port ingress
  hostname: 

# 
smpp:
  image: jambonz/smpp-esme:0.8.0-rc17
  imagePullPolicy: IfNotPresent

# sbc-inbound configuration
sbcInbound: 
  image: jambonz/sbc-inbound:0.8.0-rc17
  imagePullPolicy: IfNotPresent
  drachtioPort: "4000"
  replicas: 1

# sbc-outbound configuration
sbcOutbound: 
  image: jambonz/sbc-outbound:0.8.0-rc17
  imagePullPolicy: IfNotPresent
  drachtioPort: "4000"
  replicas: 1

# sbc-sip-sidecar configuration
sbcSipSidecar:
  image: jambonz/sbc-sip-sidecar:0.8.0-rc17
  imagePullPolicy: IfNotPresent

# sbc-call-router configuration
sbcCallRouter: 
  image: jambonz/sbc-call-router:0.8.0-rc17
  imagePullPolicy: IfNotPresent
  httpPort: "3000"
  replicas: 1

# feature-server configuration
featureServer: 
  image: jambonz/feature-server:0.8.0-rc17
  imagePullPolicy: IfNotPresent
  httpPort: "3000"
  drachtioConnection: "127.0.0.1:9022:cymru"
  freeswitchConnection: "127.0.0.1:8021:JambonzR0ck$"
  awsRegion: us-west-1
  replicas: 1
  otelSampleRate: 1.0

# sbc-sip configuration
sbcSip: 
  loglevel: info 
  sofiaLoglevel: "3"

# sidecar to wait for database up
dbWaiter:
  image: d3fk/kubectl:v1.18

# if you want to block bad sip actors, get an api key from apiban.org and put it below
apiban: 
  apiKey: 
  redisKey: "apiban:ips"
  refreshInterval: "3600"
  foreverBlockRanges: "128.90.0.0/16,162.142.125.0/24,198.235.24.0/24,205.210.31.0/24"
